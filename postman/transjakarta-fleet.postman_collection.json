{
	"info": {
		"_postman_id": "transjakarta-fleet-complete",
		"name": "TransJakarta Fleet Management - COMPLETE API",
		"description": "üöÄ **COMPLETE API Collection - Technical Assessment**\n\nüìã **Full Coverage Testing:**\n‚úÖ All 5 vehicles (B1234XYZ, B5678ABC, B9012DEF, B3456GHI, B7890JKL)\n‚úÖ Complete system health monitoring\n‚úÖ Real-time location tracking\n‚úÖ Geofence events for Jakarta landmarks\n‚úÖ Service status monitoring\n‚úÖ Error handling validation\n‚úÖ Integration testing\n\n**Setup:** `make setup` or `docker compose up -d`\n**Base URL:** http://localhost:3000\n**Total Tests:** 25+ endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "üè• System Health & Status",
			"item": [
				{
					"name": "Main API Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"console.log('üöÄ API Info:', pm.response.json().message);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/",
							"host": ["{{baseUrl}}"],
							"path": [""]
						}
					}
				},
				{
					"name": "System Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Health check responds', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 206, 503]);",
									"});",
									"const health = pm.response.json();",
									"console.log('üè• Health Status:', health.status);",
									"console.log('Database:', health.database);",
									"console.log('MQTT:', health.mqtt);",
									"console.log('RabbitMQ:', health.rabbitmq);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": ["{{baseUrl}}"],
							"path": ["health"]
						}
					}
				},
				{
					"name": "System Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const stats = pm.response.json();",
									"console.log('üìä System Statistics:');",
									"console.log('Total Locations:', stats.total_locations);",
									"console.log('Geofence Events:', stats.total_geofence_events);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/stats",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "stats"]
						}
					}
				},
				{
					"name": "MQTT Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const mqtt = pm.response.json();",
									"console.log('üì° MQTT Status:', mqtt.connected ? '‚úÖ Connected' : '‚ùå Disconnected');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/mqtt/status",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "mqtt", "status"]
						}
					}
				},
				{
					"name": "RabbitMQ Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const rabbitmq = pm.response.json();",
									"console.log('üê∞ RabbitMQ Status:', rabbitmq.connected ? '‚úÖ Connected' : '‚ùå Disconnected');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/rabbitmq/status",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "rabbitmq", "status"]
						}
					}
				}
			]
		},
		{
			"name": "üöå Vehicle Location Tracking - ALL VEHICLES",
			"item": [
				{
					"name": "Vehicle B1234XYZ - Latest Location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is 200 or 404', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
									"});",
									"if (pm.response.code === 200) {",
									"    const loc = pm.response.json();",
									"    console.log('üöå B1234XYZ:', loc.latitude + ', ' + loc.longitude);",
									"} else {",
									"    console.log('‚ö†Ô∏è B1234XYZ: No data yet');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/vehicles/B1234XYZ/location",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "vehicles", "B1234XYZ", "location"]
						}
					}
				},
				{
					"name": "Vehicle B5678ABC - Latest Location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is 200 or 404', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
									"});",
									"if (pm.response.code === 200) {",
									"    const loc = pm.response.json();",
									"    console.log('üöå B5678ABC:', loc.latitude + ', ' + loc.longitude);",
									"} else {",
									"    console.log('‚ö†Ô∏è B5678ABC: No data yet');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/vehicles/B5678ABC/location",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "vehicles", "B5678ABC", "location"]
						}
					}
				},
				{
					"name": "Vehicle B9012DEF - Latest Location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const loc = pm.response.json();",
									"    console.log('üöå B9012DEF:', loc.latitude + ', ' + loc.longitude);",
									"} else {",
									"    console.log('‚ö†Ô∏è B9012DEF: No data yet');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/vehicles/B9012DEF/location",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "vehicles", "B9012DEF", "location"]
						}
					}
				},
				{
					"name": "Vehicle B3456GHI - Latest Location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const loc = pm.response.json();",
									"    console.log('üöå B3456GHI:', loc.latitude + ', ' + loc.longitude);",
									"} else {",
									"    console.log('‚ö†Ô∏è B3456GHI: No data yet');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/vehicles/B3456GHI/location",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "vehicles", "B3456GHI", "location"]
						}
					}
				},
				{
					"name": "Vehicle B7890JKL - Latest Location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const loc = pm.response.json();",
									"    console.log('üöå B7890JKL:', loc.latitude + ', ' + loc.longitude);",
									"} else {",
									"    console.log('‚ö†Ô∏è B7890JKL: No data yet');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/vehicles/B7890JKL/location",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "vehicles", "B7890JKL", "location"]
						}
					}
				},
				{
					"name": "Vehicle History - B1234XYZ (Last 1 Hour)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const now = Math.floor(Date.now() / 1000);",
									"const oneHourAgo = now - 3600;",
									"pm.environment.set('start_time', oneHourAgo);",
									"pm.environment.set('end_time', now);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const history = pm.response.json();",
									"console.log('üìä B1234XYZ History (1h):', history.count + ' locations');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/vehicles/B1234XYZ/history?start={{start_time}}&end={{end_time}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "vehicles", "B1234XYZ", "history"],
							"query": [
								{"key": "start", "value": "{{start_time}}"},
								{"key": "end", "value": "{{end_time}}"}
							]
						}
					}
				},
				{
					"name": "Vehicle History - B5678ABC (Last 5 Minutes)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const now = Math.floor(Date.now() / 1000);",
									"const fiveMinAgo = now - 300;",
									"pm.environment.set('start_time_5min', fiveMinAgo);",
									"pm.environment.set('end_time_5min', now);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const history = pm.response.json();",
									"console.log('üìä B5678ABC Recent (5m):', history.count + ' locations');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/vehicles/B5678ABC/history?start={{start_time_5min}}&end={{end_time_5min}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "vehicles", "B5678ABC", "history"],
							"query": [
								{"key": "start", "value": "{{start_time_5min}}"},
								{"key": "end", "value": "{{end_time_5min}}"}
							]
						}
					}
				}
			]
		},
		{
			"name": "üéØ Geofencing Events - ALL VEHICLES",
			"item": [
				{
					"name": "Geofence Events - B1234XYZ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const events = pm.response.json();",
									"console.log('üéØ B1234XYZ Geofence Events:', events.count);",
									"if (events.count > 0) {",
									"    console.log('‚úÖ Landmark entries detected!');",
									"} else {",
									"    console.log('‚ö†Ô∏è No landmark entries yet');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/vehicles/B1234XYZ/geofence-events?limit=10",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "vehicles", "B1234XYZ", "geofence-events"],
							"query": [{"key": "limit", "value": "10"}]
						}
					}
				},
				{
					"name": "Geofence Events - B5678ABC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const events = pm.response.json();",
									"console.log('üéØ B5678ABC Geofence Events:', events.count);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/vehicles/B5678ABC/geofence-events?limit=10",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "vehicles", "B5678ABC", "geofence-events"],
							"query": [{"key": "limit", "value": "10"}]
						}
					}
				},
				{
					"name": "Geofence Events - B9012DEF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const events = pm.response.json();",
									"console.log('üéØ B9012DEF Geofence Events:', events.count);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/vehicles/B9012DEF/geofence-events?limit=10",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "vehicles", "B9012DEF", "geofence-events"],
							"query": [{"key": "limit", "value": "10"}]
						}
					}
				},
				{
					"name": "Geofence Events - B3456GHI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const events = pm.response.json();",
									"console.log('üéØ B3456GHI Geofence Events:', events.count);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/vehicles/B3456GHI/geofence-events?limit=5",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "vehicles", "B3456GHI", "geofence-events"],
							"query": [{"key": "limit", "value": "5"}]
						}
					}
				},
				{
					"name": "Geofence Events - B7890JKL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const events = pm.response.json();",
									"console.log('üéØ B7890JKL Geofence Events:', events.count);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/vehicles/B7890JKL/geofence-events?limit=5",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "vehicles", "B7890JKL", "geofence-events"],
							"query": [{"key": "limit", "value": "5"}]
						}
					}
				}
			]
		},
		{
			"name": "‚ùå Error Handling & Validation",
			"item": [
				{
					"name": "Invalid Vehicle ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"console.log('‚ùå Expected 404 for invalid vehicle:', pm.response.json().error);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/vehicles/INVALID_VEHICLE/location",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "vehicles", "INVALID_VEHICLE", "location"]
						}
					}
				},
				{
					"name": "Invalid Time Range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"console.log('‚ùå Expected 400 for invalid time range');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/vehicles/B1234XYZ/history?start=invalid&end=invalid",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "vehicles", "B1234XYZ", "history"],
							"query": [
								{"key": "start", "value": "invalid"},
								{"key": "end", "value": "invalid"}
							]
						}
					}
				},
				{
					"name": "Missing Time Parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"console.log('‚ùå Expected 400 for missing parameters');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/vehicles/B1234XYZ/history",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "vehicles", "B1234XYZ", "history"]
						}
					}
				}
			]
		},
		{
			"name": "üé≠ Integration & Demo Tests",
			"item": [
				{
					"name": "Complete System Integration Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('üé≠ ========== COMPLETE INTEGRATION TEST ==========');",
									"",
									"// Test 1: Health Check",
									"pm.sendRequest({",
									"    url: pm.environment.get('baseUrl') + '/health',",
									"    method: 'GET'",
									"}, function (err, res) {",
									"    if (res.code === 200) {",
									"        const health = res.json();",
									"        console.log('‚úÖ HEALTH CHECK PASSED');",
									"        console.log('  Database:', health.database);",
									"        console.log('  MQTT:', health.mqtt);",
									"        console.log('  RabbitMQ:', health.rabbitmq);",
									"    }",
									"});",
									"",
									"// Test 2: All Vehicle Status",
									"setTimeout(() => {",
									"    const vehicles = ['B1234XYZ', 'B5678ABC', 'B9012DEF', 'B3456GHI', 'B7890JKL'];",
									"    console.log('üöå FLEET STATUS TEST');",
									"    ",
									"    vehicles.forEach((vehicleId, index) => {",
									"        setTimeout(() => {",
									"            pm.sendRequest({",
									"                url: pm.environment.get('baseUrl') + '/api/v1/vehicles/' + vehicleId + '/location',",
									"                method: 'GET'",
									"            }, function (err, res) {",
									"                if (res.code === 200) {",
									"                    const location = res.json();",
									"                    console.log('  ‚úÖ', vehicleId, 'ACTIVE at', location.latitude.toFixed(4) + ',', location.longitude.toFixed(4));",
									"                } else {",
									"                    console.log('  ‚ö†Ô∏è', vehicleId, 'NO DATA');",
									"                }",
									"                ",
									"                if (index === vehicles.length - 1) {",
									"                    console.log('üéØ ========== INTEGRATION TEST COMPLETE ==========');",
									"                }",
									"            });",
									"        }, index * 300);",
									"    });",
									"}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/stats",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "stats"]
						}
					}
				},
				{
					"name": "Fleet Performance Overview",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('üìä ========== FLEET PERFORMANCE OVERVIEW ==========');",
									"",
									"// Get system statistics",
									"const stats = pm.response.json();",
									"console.log('SYSTEM METRICS:');",
									"console.log('  Total Location Records:', stats.total_locations);",
									"console.log('  Total Geofence Events:', stats.total_geofence_events);",
									"console.log('  Data Collection Rate:', Math.round(stats.total_locations / 60) + ' records/min (estimated)');",
									"",
									"// Test geofence functionality",
									"setTimeout(() => {",
									"    console.log('');",
									"    console.log('üéØ GEOFENCE MONITORING:');",
									"    console.log('  Jakarta Landmarks Monitored:');",
									"    console.log('    ‚Ä¢ Monas (National Monument)');",
									"    console.log('    ‚Ä¢ Bundaran HI (Hotel Indonesia Roundabout)');",
									"    console.log('    ‚Ä¢ Grand Indonesia (Shopping Mall)');",
									"    console.log('    ‚Ä¢ Plaza Indonesia (Shopping Mall)');",
									"    console.log('    ‚Ä¢ Sarinah (Department Store)');",
									"    console.log('  Detection Radius: 50 meters');",
									"    ",
									"    if (stats.total_geofence_events > 0) {",
									"        console.log('  ‚úÖ GEOFENCING ACTIVE - ' + stats.total_geofence_events + ' landmark entries detected!');",
									"    } else {",
									"        console.log('  ‚è≥ Waiting for vehicles to enter landmark areas...');",
									"    }",
									"}, 500);",
									"",
									"// Performance assessment",
									"setTimeout(() => {",
									"    console.log('');",
									"    console.log('‚ö° PERFORMANCE ASSESSMENT:');",
									"    console.log('  Response Time:', pm.response.responseTime + 'ms');",
									"    ",
									"    if (pm.response.responseTime < 100) {",
									"        console.log('  üöÄ EXCELLENT performance');",
									"    } else if (pm.response.responseTime < 500) {",
									"        console.log('  ‚úÖ GOOD performance');",
									"    } else {",
									"        console.log('  ‚ö†Ô∏è Consider optimization');",
									"    }",
									"    ",
									"    console.log('');",
									"    console.log('üéâ ========== ASSESSMENT COMPLETE ==========');",
									"    console.log('‚úÖ TransJakarta Fleet Management System fully operational!');",
									"}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/stats",
							"host": ["{{baseUrl}}"],
							"path": ["api", "v1", "stats"]
						}
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"exec": [
					"console.log('üöÄ TransJakarta Fleet Management - COMPLETE API Testing');",
					"console.log('üì° Base URL:', pm.environment.get('baseUrl') || 'http://localhost:3000');",
					"console.log('‚è∞ Test Time:', new Date().toISOString());",
					"console.log('üéØ Coverage: ALL endpoints and vehicles');",
					"console.log('');",
					"",
					"if (!pm.environment.get('baseUrl')) {",
					"    pm.environment.set('baseUrl', 'http://localhost:3000');",
					"}"
				],
				"type": "text/javascript"
			}
		},
		{
			"listen": "test",
			"script": {
				"exec": [
					"// Global response monitoring",
					"if (pm.response.responseTime > 1000) {",
					"    console.log('‚ö†Ô∏è Slow response detected:', pm.response.responseTime + 'ms');",
					"}",
					"",
					"if (pm.response.code >= 400) {",
					"    console.log('‚ùå Error response:', pm.response.code, pm.response.status);",
					"}"
				],
				"type": "text/javascript"
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string",
			"description": "Base URL for TransJakarta Fleet Management API"
		},
		{
			"key": "start_time",
			"value": "",
			"type": "string",
			"description": "Dynamic start time for history queries"
		},
		{
			"key": "end_time",
			"value": "",
			"type": "string",
			"description": "Dynamic end time for history queries"
		},
		{
			"key": "start_time_5min",
			"value": "",
			"type": "string",
			"description": "Start time for 5-minute history queries"
		},
		{
			"key": "end_time_5min",
			"value": "",
			"type": "string",
			"description": "End time for 5-minute history queries"
		}
	]
}