#!/bin/bash

echo "üöÄ Production Deployment - TransJakarta Fleet Management"
echo "========================================================"

# Production deployment script
if [ "$1" != "--confirm" ]; then
    echo "This script will deploy the system in production mode."
    echo "Make sure you have:"
    echo "  ‚Ä¢ Updated environment variables for production"
    echo "  ‚Ä¢ Configured secure passwords"
    echo "  ‚Ä¢ Set up SSL certificates (if needed)"
    echo "  ‚Ä¢ Configured monitoring and logging"
    echo ""
    echo "To proceed, run: $0 --confirm"
    exit 1
fi

echo "üîß Starting production deployment..."

# Check if production environment file exists
if [ ! -f .env.production ]; then
    echo "‚ùå Production environment file (.env.production) not found!"
    echo "Please create .env.production with secure configuration."
    exit 1
fi

# Backup current deployment
if docker compose ps | grep -q "Up"; then
    echo "üì¶ Creating backup of current deployment..."
    docker compose exec postgres pg_dump -U postgres transjakarta_fleet > backup-$(date +%Y%m%d_%H%M%S).sql
fi

# Pull latest images
echo "üì• Pulling latest images..."
docker compose pull

# Deploy with production configuration
echo "üöÄ Deploying production system..."
docker compose -f docker-compose.yml -f docker/docker-compose.prod.yml --env-file .env.production up -d --build

# Wait for services
echo "‚è≥ Waiting for services to start..."
sleep 30

# Verify deployment
echo "üîç Verifying production deployment..."
HEALTH_CHECK=$(curl -s http://localhost:3000/health 2>/dev/null)

if echo "$HEALTH_CHECK" | grep -q "healthy"; then
    echo "‚úÖ Production deployment successful!"
    echo ""
    echo "üìä System Status:"
    echo "$HEALTH_CHECK" | jq . 2>/dev/null || echo "$HEALTH_CHECK"
else
    echo "‚ùå Production deployment verification failed!"
    echo "Health check response: $HEALTH_CHECK"
    exit 1
fi

echo ""
echo "‚úÖ Production deployment complete!"
echo ""
echo "üîç Production checklist:"
echo "  ‚Ä¢ Update passwords in environment variables"
echo "  ‚Ä¢ Configure SSL/TLS certificates"
echo "  ‚Ä¢ Set up log aggregation"
echo "  ‚Ä¢ Configure monitoring alerts"
echo "  ‚Ä¢ Schedule database backups"
echo "  ‚Ä¢ Test failover procedures"
echo ""
echo "üìä Monitoring:"
echo "  ‚Ä¢ Health: http://localhost:3000/health"
echo "  ‚Ä¢ RabbitMQ: http://localhost:15672"
echo "  ‚Ä¢ Logs: docker compose logs -f"