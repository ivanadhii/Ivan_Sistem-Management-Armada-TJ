services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: transjakarta_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: transjakarta_fleet
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - transjakarta-network
    restart: unless-stopped

  # MQTT Broker
  mosquitto:
    image: eclipse-mosquitto:2
    container_name: transjakarta_mosquitto
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./docker/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    healthcheck:
      test: ["CMD-SHELL", "mosquitto_pub -h localhost -t 'health/check' -m 'test' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - transjakarta-network
    restart: unless-stopped

  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: transjakarta_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - transjakarta-network
    restart: unless-stopped

  # Redis Cache (Optional - for future scaling)
  redis:
    image: redis:7-alpine
    container_name: transjakarta_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - transjakarta-network
    restart: unless-stopped

  # Backend Server
  server:
    build:
      context: .
      dockerfile: docker/Dockerfile.server
    container_name: transjakarta_server
    ports:
      - "3000:3000"
    environment:
      - FLEET_DATABASE_HOST=postgres
      - FLEET_DATABASE_PORT=5432
      - FLEET_DATABASE_USER=postgres
      - FLEET_DATABASE_PASSWORD=postgres
      - FLEET_DATABASE_DBNAME=transjakarta_fleet
      - FLEET_DATABASE_SSLMODE=disable
      - FLEET_MQTT_BROKER=mosquitto
      - FLEET_MQTT_PORT=1883
      - FLEET_RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - FLEET_SERVER_HOST=0.0.0.0
      - FLEET_SERVER_PORT=3000
    depends_on:
      postgres:
        condition: service_healthy
      mosquitto:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - transjakarta-network

  # Vehicle Publisher
  publisher:
    build:
      context: .
      dockerfile: docker/Dockerfile.publisher
    container_name: transjakarta_publisher
    environment:
      - FLEET_MQTT_BROKER=mosquitto
      - FLEET_MQTT_PORT=1883
    depends_on:
      mosquitto:
        condition: service_healthy
      server:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - transjakarta-network

  # Geofence Worker
  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: transjakarta_worker
    environment:
      - FLEET_DATABASE_HOST=postgres
      - FLEET_DATABASE_PORT=5432
      - FLEET_DATABASE_USER=postgres
      - FLEET_DATABASE_PASSWORD=postgres
      - FLEET_DATABASE_DBNAME=transjakarta_fleet
      - FLEET_DATABASE_SSLMODE=disable
      - FLEET_RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      server:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - transjakarta-network

volumes:
  postgres_data:
    driver: local
  mosquitto_data:
    driver: local
  mosquitto_logs:
    driver: local
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local

networks:
  transjakarta-network:
    driver: bridge
    name: transjakarta-fleet-network